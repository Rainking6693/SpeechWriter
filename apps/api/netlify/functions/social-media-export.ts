import { Handler, HandlerEvent } from '@netlify/functions'\nimport { z } from 'zod'\nimport { drizzle } from 'drizzle-orm/postgres-js'\nimport { eq } from 'drizzle-orm'\nimport postgres from 'postgres'\nimport { speeches, speechSections, users, subscriptions } from '@speechwriter/database/schema'\nimport jwt from 'jsonwebtoken'\nimport { robustAICall } from './lib/ai-fallback-utils'\nimport { trackSpeechEvent } from './lib/analytics-utils'\nimport { ANALYTICS_EVENTS } from '@speechwriter/analytics'\n\nconst client = postgres(process.env.DATABASE_URL!, { prepare: false })\nconst db = drizzle(client, { schema: { speeches, speechSections, users, subscriptions } })\n\nconst socialExportSchema = z.object({\n  speechId: z.string().uuid(),\n  platform: z.enum(['twitter', 'linkedin', 'facebook', 'instagram']),\n  contentType: z.enum(['quote', 'summary', 'teaser', 'key-points']),\n  customBranding: z.object({\n    authorName: z.string().optional(),\n    authorTitle: z.string().optional(),\n    companyName: z.string().optional(),\n    website: z.string().optional(),\n    hashtags: z.array(z.string()).optional()\n  }).optional(),\n  includeImage: z.boolean().optional().default(false)\n})\n\nconst verifyToken = (token: string) => {\n  try {\n    return jwt.verify(token, process.env.NEXTAUTH_SECRET!)\n  } catch {\n    return null\n  }\n}\n\nconst PLATFORM_LIMITS = {\n  twitter: { maxLength: 280, imageSupport: true },\n  linkedin: { maxLength: 3000, imageSupport: true },\n  facebook: { maxLength: 63206, imageSupport: true },\n  instagram: { maxLength: 2200, imageSupport: true }\n}\n\nconst handler: Handler = async (event: HandlerEvent) => {\n  if (event.httpMethod !== 'POST') {\n    return {\n      statusCode: 405,\n      body: JSON.stringify({ error: 'Method not allowed' })\n    }\n  }\n\n  try {\n    // Verify authentication\n    const authHeader = event.headers.authorization\n    if (!authHeader?.startsWith('Bearer ')) {\n      return {\n        statusCode: 401,\n        body: JSON.stringify({ error: 'Unauthorized' })\n      }\n    }\n\n    const token = authHeader.replace('Bearer ', '')\n    const decoded = verifyToken(token) as any\n    if (!decoded?.sub) {\n      return {\n        statusCode: 401,\n        body: JSON.stringify({ error: 'Invalid token' })\n      }\n    }\n\n    const userId = decoded.sub\n\n    // Parse and validate request\n    const body = JSON.parse(event.body || '{}')\n    const { speechId, platform, contentType, customBranding, includeImage } = socialExportSchema.parse(body)\n\n    // Verify speech ownership\n    const [speech] = await db\n      .select()\n      .from(speeches)\n      .where(eq(speeches.id, speechId))\n      .limit(1)\n\n    if (!speech || speech.userId !== userId) {\n      return {\n        statusCode: 404,\n        body: JSON.stringify({ error: 'Speech not found' })\n      }\n    }\n\n    // Get user subscription for branding features\n    const [user] = await db\n      .select({\n        user: users,\n        subscription: subscriptions\n      })\n      .from(users)\n      .leftJoin(subscriptions, eq(users.id, subscriptions.userId))\n      .where(eq(users.id, userId))\n      .limit(1)\n\n    const isPremium = user?.subscription?.status === 'active' && \n                     ['pro', 'team'].includes(user.subscription.planType)\n\n    // Get speech content\n    const sections = await db\n      .select()\n      .from(speechSections)\n      .where(eq(speechSections.speechId, speechId))\n      .orderBy(speechSections.orderIndex)\n\n    const fullText = sections.map(s => s.content).filter(Boolean).join('\\n\\n')\n\n    if (!fullText) {\n      return {\n        statusCode: 400,\n        body: JSON.stringify({ error: 'Speech content not available' })\n      }\n    }\n\n    // Track analytics\n    await trackSpeechEvent(userId, speechId, ANALYTICS_EVENTS.SOCIAL_EXPORT, {\n      platform,\n      content_type: contentType,\n      is_premium: isPremium\n    })\n\n    // Generate social media content\n    const socialContent = await generateSocialContent(\n      fullText,\n      speech,\n      platform,\n      contentType,\n      customBranding,\n      isPremium\n    )\n\n    // Apply branding if premium user\n    const finalContent = isPremium && customBranding \n      ? applyCustomBranding(socialContent, customBranding, platform)\n      : applyDefaultBranding(socialContent, platform)\n\n    return {\n      statusCode: 200,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      },\n      body: JSON.stringify({\n        content: finalContent,\n        platform,\n        contentType,\n        metadata: {\n          characterCount: finalContent.text.length,\n          maxLength: PLATFORM_LIMITS[platform].maxLength,\n          withinLimit: finalContent.text.length <= PLATFORM_LIMITS[platform].maxLength,\n          isPremium,\n          includesCustomBranding: isPremium && !!customBranding\n        },\n        suggestions: generateOptimizationSuggestions(finalContent, platform),\n        message: 'Social media content generated successfully'\n      })\n    }\n\n  } catch (error) {\n    console.error('Error generating social media content:', error)\n    return {\n      statusCode: 500,\n      body: JSON.stringify({ \n        error: 'Failed to generate social media content',\n        details: process.env.NODE_ENV === 'development' ? error.message : undefined\n      })\n    }\n  }\n}\n\n/**\n * Generate social media content using AI\n */\nasync function generateSocialContent(\n  fullText: string,\n  speech: any,\n  platform: string,\n  contentType: string,\n  customBranding?: any,\n  isPremium: boolean = false\n) {\n  const platformLimit = PLATFORM_LIMITS[platform].maxLength\n  const reservedSpace = 50 // Reserve space for branding/hashtags\n  const targetLength = platformLimit - reservedSpace\n\n  const prompt = `\nCreate ${contentType} content for ${platform} from this speech:\n\nTitle: ${speech.title}\nOccasion: ${speech.occasion}\nAudience: ${speech.audience}\n\nSpeech Content:\n${fullText.substring(0, 3000)}...\n\nRequirements:\n- Platform: ${platform}\n- Content Type: ${contentType}\n- Maximum Length: ${targetLength} characters\n- Engaging and shareable\n- Maintain the speech's key message\n${customBranding?.authorName ? `- Author: ${customBranding.authorName}` : ''}\n${customBranding?.companyName ? `- Company: ${customBranding.companyName}` : ''}\n\nContent Type Guidelines:\n${getContentTypeGuidelines(contentType, platform)}\n\nReturn a JSON object:\n{\n  \"text\": \"the social media post text\",\n  \"hashtags\": [\"relevant\", \"hashtags\"],\n  \"callToAction\": \"optional call to action\",\n  \"imageDescription\": \"description for accompanying image if needed\"\n}`\n\n  try {\n    const response = await robustAICall(\n      [\n        {\n          role: 'system',\n          content: `You are a social media expert specializing in creating engaging content from speeches. Create platform-appropriate content that captures the essence of the speech while being optimized for ${platform}.`\n        },\n        {\n          role: 'user',\n          content: prompt\n        }\n      ],\n      {\n        model: 'gpt-4',\n        temperature: 0.7,\n        maxTokens: 800\n      }\n    )\n\n    if (response.success) {\n      try {\n        return JSON.parse(response.content)\n      } catch (parseError) {\n        console.error('Failed to parse AI response:', parseError)\n        return generateFallbackContent(fullText, speech, platform, contentType, targetLength)\n      }\n    } else {\n      return generateFallbackContent(fullText, speech, platform, contentType, targetLength)\n    }\n  } catch (error) {\n    console.error('AI content generation failed:', error)\n    return generateFallbackContent(fullText, speech, platform, contentType, targetLength)\n  }\n}\n\n/**\n * Get content type specific guidelines\n */\nfunction getContentTypeGuidelines(contentType: string, platform: string): string {\n  const guidelines = {\n    quote: {\n      twitter: 'Extract the most impactful quote. Use quotation marks. Keep it punchy.',\n      linkedin: 'Professional quote with context. Explain why it matters.',\n      facebook: 'Engaging quote with story context. Encourage discussion.',\n      instagram: 'Inspirational quote. Visual and emotional appeal.'\n    },\n    summary: {\n      twitter: 'Key takeaways in thread format or single tweet.',\n      linkedin: 'Professional summary with insights and lessons learned.',\n      facebook: 'Comprehensive summary that tells a story.',\n      instagram: 'Visual summary with key points highlighted.'\n    },\n    teaser: {\n      twitter: 'Create curiosity. Hint at valuable insights.',\n      linkedin: 'Professional teaser highlighting business value.',\n      facebook: 'Engaging teaser that encourages clicks/shares.',\n      instagram: 'Visual teaser with emotional hook.'\n    },\n    'key-points': {\n      twitter: 'Numbered list or bullet points. Concise and actionable.',\n      linkedin: 'Professional bullet points with explanations.',\n      facebook: 'Easy-to-read list with engaging introduction.',\n      instagram: 'Visual list format. Easy to scan.'\n    }\n  }\n\n  return guidelines[contentType]?.[platform] || 'Create engaging, platform-appropriate content.'\n}\n\n/**\n * Generate fallback content when AI fails\n */\nfunction generateFallbackContent(fullText: string, speech: any, platform: string, contentType: string, targetLength: number) {\n  const sentences = fullText.split(/[.!?]+/).filter(s => s.trim().length > 0)\n  const firstSentence = sentences[0]?.trim() || ''\n  \n  let text = ''\n  let hashtags = ['#speech', '#inspiration']\n  \n  switch (contentType) {\n    case 'quote':\n      text = `\"${firstSentence}\" - From my recent speech on ${speech.title}`\n      break\n    case 'summary':\n      text = `Key insights from my speech \"${speech.title}\": ${sentences.slice(0, 2).join('. ')}.`\n      break\n    case 'teaser':\n      text = `Just shared some thoughts on ${speech.title}. Here's what I learned...`\n      break\n    case 'key-points':\n      text = `Key takeaways from \"${speech.title}\":\\n• ${sentences[0]}\\n• ${sentences[1] || 'More insights shared in the full speech'}`\n      break\n  }\n  \n  // Truncate if too long\n  if (text.length > targetLength) {\n    text = text.substring(0, targetLength - 3) + '...'\n  }\n  \n  return {\n    text,\n    hashtags,\n    callToAction: 'What are your thoughts?',\n    imageDescription: `Visual representation of the speech \"${speech.title}\"`\n  }\n}\n\n/**\n * Apply custom branding for premium users\n */\nfunction applyCustomBranding(content: any, branding: any, platform: string) {\n  let text = content.text\n  let hashtags = [...(content.hashtags || [])]\n  \n  // Add custom hashtags\n  if (branding.hashtags) {\n    hashtags = [...hashtags, ...branding.hashtags]\n  }\n  \n  // Add author attribution\n  if (branding.authorName) {\n    if (platform === 'twitter') {\n      text += `\\n\\n- ${branding.authorName}`\n    } else {\n      text += `\\n\\nBy ${branding.authorName}`\n    }\n    \n    if (branding.authorTitle) {\n      text += `, ${branding.authorTitle}`\n    }\n  }\n  \n  // Add company/website\n  if (branding.companyName && platform !== 'twitter') {\n    text += `\\n${branding.companyName}`\n  }\n  \n  if (branding.website && platform === 'linkedin') {\n    text += `\\n${branding.website}`\n  }\n  \n  return {\n    ...content,\n    text,\n    hashtags: [...new Set(hashtags)].slice(0, platform === 'twitter' ? 3 : 10)\n  }\n}\n\n/**\n * Apply default branding for free users\n */\nfunction applyDefaultBranding(content: any, platform: string) {\n  let text = content.text\n  let hashtags = [...(content.hashtags || [])]\n  \n  // Add SpeechWriter branding for free users\n  if (platform === 'twitter') {\n    hashtags.push('#SpeechWriter')\n  } else {\n    text += '\\n\\nCreated with SpeechWriter AI'\n  }\n  \n  return {\n    ...content,\n    text,\n    hashtags: [...new Set(hashtags)]\n  }\n}\n\n/**\n * Generate optimization suggestions\n */\nfunction generateOptimizationSuggestions(content: any, platform: string) {\n  const suggestions = []\n  const limit = PLATFORM_LIMITS[platform].maxLength\n  const textLength = content.text.length\n  \n  if (textLength > limit) {\n    suggestions.push(`Content is ${textLength - limit} characters over the ${platform} limit`)\n    suggestions.push('Consider shortening the text or splitting into multiple posts')\n  } else if (textLength < limit * 0.5) {\n    suggestions.push('Content is quite short - consider adding more detail or context')\n  }\n  \n  if (platform === 'twitter' && !content.hashtags?.length) {\n    suggestions.push('Consider adding relevant hashtags to increase discoverability')\n  }\n  \n  if (platform === 'linkedin' && !content.callToAction) {\n    suggestions.push('Add a call-to-action to encourage engagement')\n  }\n  \n  if (platform === 'instagram' && !content.imageDescription) {\n    suggestions.push('Consider creating a visual element to accompany this post')\n  }\n  \n  if (suggestions.length === 0) {\n    suggestions.push('Content looks good for this platform!')\n  }\n  \n  return suggestions\n}\n\nexport { handler }"