import { Handler, HandlerEvent } from '@netlify/functions'\nimport { z } from 'zod'\nimport { processUploadedFile } from './lib/file-processing-utils'\n\nconst processFileSchema = z.object({\n  referenceMaterialId: z.string().uuid(),\n  fileKey: z.string().min(1)\n})\n\nconst handler: Handler = async (event: HandlerEvent) => {\n  if (event.httpMethod !== 'POST') {\n    return {\n      statusCode: 405,\n      body: JSON.stringify({ error: 'Method not allowed' })\n    }\n  }\n\n  try {\n    // Parse request body\n    const body = JSON.parse(event.body || '{}')\n    const { referenceMaterialId, fileKey } = processFileSchema.parse(body)\n\n    // Verify the request is from a trusted source (in production, add proper authentication)\n    const authHeader = event.headers['x-webhook-secret']\n    if (authHeader !== process.env.WEBHOOK_SECRET) {\n      return {\n        statusCode: 401,\n        body: JSON.stringify({ error: 'Unauthorized webhook' })\n      }\n    }\n\n    // Process the uploaded file\n    await processUploadedFile(referenceMaterialId)\n\n    return {\n      statusCode: 200,\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        success: true,\n        message: 'File processed successfully',\n        referenceMaterialId\n      })\n    }\n\n  } catch (error) {\n    console.error('Error processing uploaded file:', error)\n    \n    return {\n      statusCode: 500,\n      body: JSON.stringify({ \n        error: 'Failed to process uploaded file',\n        details: process.env.NODE_ENV === 'development' ? error.message : undefined\n      })\n    }\n  }\n}\n\nexport { handler }"